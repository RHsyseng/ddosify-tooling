name: Go App Build
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Get Dependencies
      working-directory: ./tooling/
      run: go mod tidy

    - name: Install the Kubectl binary
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install ./kubectl /usr/local/bin/
        kubectl version --short --client

    - name: Install the Kind binary
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        kind version

    - name: Install the operator SDK
      run: |
        curl -Lo ./operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/v1.23.0/operator-sdk_linux_amd64
        chmod +x ./operator-sdk
        mv ./operator-sdk /usr/local/bin/operator-sdk

    - name: Create a Kind Cluster
      run: kind create cluster

    - name: Run Unit Tests
      working-directory: ./tooling/pkg
      run: |
        GOOS=linux GOARCH=amd64 go test -cover  -v . -covermode=count -coverprofile=coverage.out
        go tool cover -func=coverage.out -o=/tmp/coverage.out

    - name: Go Coverage Badge  # Pass the `coverage.out` output to this action
      uses: tj-actions/coverage-badge-go@v2
      with:
        filename: /tmp/coverage.out
    - name: Verify Changed files
      uses: tj-actions/verify-changed-files@v9.1
      id: verify-changed-files
      with:
        files: README.md

    - name: Commit changes
      if: steps.verify-changed-files.outputs.files_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "chore: Updated coverage badge."

    - name: Push changes
      if: steps.verify-changed-files.outputs.files_changed == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ github.token }}
        branch: ${{ github.head_ref }}

    - name: Run Build
      working-directory: ./tooling/
      run: |
        echo "Create output dir"
        mkdir -p ./out/
        echo "Building Linux amd64 binary"
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./out/ddosify-latencies-linux-amd64
        echo "Building Linux arm64 binary"
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o ./out/ddosify-latencies-linux-arm64
        echo "Building Darwin amd64 binary"
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o ./out/ddosify-latencies-darwin-amd64
        echo "Building Darwin arm64 binary"
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o ./out/ddosify-latencies-darwin-arm64
        echo "Building Windows amd64 binary"
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o ./out/ddosify-latencies-windows-amd64.exe

    - name: Save CLI Binaries Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ddosify-latencies-binaries
        path: ./tooling/out/

  release:
    name: Creates a new release with the resulting binaries
    needs: [build]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - asset_name: ddosify-latencies-linux-amd64
          - asset_name: ddosify-latencies-linux-arm64
          - asset_name: ddosify-latencies-darwin-amd64
          - asset_name: ddosify-latencies-darwin-arm64
          - asset_name: ddosify-latencies-windows-amd64.exe
    steps:
    - name: Pull the cli binaries from Artifacts
      uses: actions/download-artifact@v3
      with:
        path: /tmp/
  
    - name: Upload binary to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: /tmp/ddosify-latencies-binaries/${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}-release
        overwrite: true
        body: "Automatic release created by a GitHub Action"
